@import "../scss/colors.scss";


@mixin opacityStair($fade: 0.9, $step: 0.05) {
	// Recursive sass example
    
	& + * {
		opacity: $fade;
		@if $fade <= $step {
		  // exit
		} @else {
			@include opacityStair($fade - $step, $step)
		}
	}
}


.printer {
	font-family: "Ubuntu Mono", monospace ;
	text-rendering: optimizespeed;
	line-height: 14px;
	font-size: 11px;
	background: $backgroundColor;
	color: $blue; // MAIN COLOR TEXT
	width: 100%;
	overflow: auto;

	// FOLDED WITH GLUE AND PADDING
	.gluedPreview{
		margin: 0px 6px;
		& > * {
			display: inline-block;
		}
		:not(:last-child):after{
			color: #FFFFFF;
			content: ",";
			margin-right: 6px;
		}
	}


	/*
	//nice selection effect
	.fold:hover {
		// seems impossible to select firstchildName
		background-color: rgba(0, 0, 0, 0.2);
		border: 1px solid rgba(255, 0, 0, 0.3);
		margin: -1px;
	}
	*/
	.foldHeadLine:hover {
		background-color: $dirHoverColor;
	}

	.foldHeadLine {
		padding-left: 7px;
	}

	.printTab {
		padding-left: 5px;
		margin-left: 10px;
		border-left: 1px solid $tabLineColor;
		& > *:not(.fold) {
			margin-left: 19px;
		}
	}
	.Pointing_Small_Triangle{
		color: $grey;
		cursor: pointer;
		margin-right: 5px;
		position:relative;
		vertical-align: 2px;
	}
	/////////////////////////
	.object {
		color: red;
	}

	.name::after{
		color: $grey;
		content: ":\00a0";
	}

	.number{
		color: $numberColor;
	}
	.boolean {
		color: $booleanColor;
	}

	.string {
		color: $stringColor;
		&::after,
		&::before{
			color: $grey;
			content: '"';
		}
	}

	.grey {
		color: $grey;
	}



	// LAST USED BU HAAAAAAAAAAAAAA
	.inline,
	.inline > *
	{
		display: inline-block;
	}
}
